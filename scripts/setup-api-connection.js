#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const readline = require('readline')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

console.log('🚀 Starling Dashboard API Connection Setup\n')

const defaultConfig = {
  NEXT_PUBLIC_API_URL: 'http://localhost:3001/api',
  STARLING_API_URL: 'http://localhost:3001/api',
  NODE_ENV: 'development',
  NEXT_PUBLIC_CORS_ORIGIN: 'http://localhost:3000'
}

async function question(text) {
  return new Promise(resolve => {
    rl.question(text, resolve)
  })
}

async function setupEnvironment() {
  console.log('📝 Setting up environment configuration...\n')
  
  const config = { ...defaultConfig }
  
  // Ask for API URL
  const apiUrl = await question(`API URL (${defaultConfig.NEXT_PUBLIC_API_URL}): `)
  if (apiUrl.trim()) {
    config.NEXT_PUBLIC_API_URL = apiUrl.trim()
    config.STARLING_API_URL = apiUrl.trim()
  }
  
  // Ask for dashboard URL
  const dashboardUrl = await question(`Dashboard URL (${defaultConfig.NEXT_PUBLIC_CORS_ORIGIN}): `)
  if (dashboardUrl.trim()) {
    config.NEXT_PUBLIC_CORS_ORIGIN = dashboardUrl.trim()
  }
  
  // Ask for environment
  const environment = await question('Environment (development/production) [development]: ')
  if (environment.trim()) {
    config.NODE_ENV = environment.trim()
  }
  
  return config
}

function createEnvFile(config) {
  const envContent = `# Starling Dashboard API Configuration
# Generated by setup script on ${new Date().toISOString()}

# API Configuration
NEXT_PUBLIC_API_URL=${config.NEXT_PUBLIC_API_URL}
STARLING_API_URL=${config.STARLING_API_URL}

# Environment
NODE_ENV=${config.NODE_ENV}

# CORS Configuration
NEXT_PUBLIC_CORS_ORIGIN=${config.NEXT_PUBLIC_CORS_ORIGIN}

# Optional: Authentication (uncomment if needed)
# STARLING_API_KEY=your_api_key_here
# STARLING_JWT_SECRET=your_jwt_secret_here

# Optional: Database (uncomment if needed)
# DATABASE_URL=postgresql://username:password@localhost:5432/starling_remittance
# REDIS_URL=redis://localhost:6379
`

  const envPath = path.join(process.cwd(), '.env.local')
  
  try {
    fs.writeFileSync(envPath, envContent)
    console.log(`✅ Environment file created: ${envPath}`)
    return true
  } catch (error) {
    console.error(`❌ Failed to create environment file: ${error.message}`)
    return false
  }
}

async function testApiConnection(apiUrl) {
  console.log(`\n🔍 Testing connection to ${apiUrl}...`)
  
  try {
    const fetch = (await import('node-fetch')).default
    const healthUrl = `${apiUrl}/health`
    
    const response = await fetch(healthUrl, { 
      timeout: 5000,
      headers: {
        'Accept': 'application/json'
      }
    })
    
    if (response.ok) {
      console.log('✅ API connection successful!')
      const data = await response.json().catch(() => ({}))
      console.log('📊 API Response:', data)
      return true
    } else {
      console.log(`⚠️  API responded with status: ${response.status}`)
      console.log('📝 This might be normal if the API doesn\'t have a /health endpoint')
      return false
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('❌ Connection refused - API server may not be running')
      console.log('💡 Make sure your starling-remittance-api is running on the specified port')
    } else if (error.name === 'AbortError') {
      console.log('❌ Connection timeout - API server may be slow or unreachable')
    } else {
      console.log(`❌ Connection failed: ${error.message}`)
    }
    return false
  }
}

function displayNextSteps(apiConnected) {
  console.log('\n🎉 Setup Complete!\n')
  
  console.log('📋 Next Steps:')
  console.log('1. Start your starling-remittance-api server (if not already running)')
  console.log('2. Run: npm run dev (or pnpm dev)')
  console.log('3. Open: http://localhost:3000')
  
  if (!apiConnected) {
    console.log('\n⚠️  API Connection Notes:')
    console.log('• The dashboard will use mock data until API is available')
    console.log('• Check SETUP.md for detailed troubleshooting')
    console.log('• Verify your API server CORS settings')
  }
  
  console.log('\n📚 Documentation:')
  console.log('• Setup Guide: SETUP.md')
  console.log('• API Integration: lib/api.ts')
  console.log('• Configuration: lib/config.ts')
  
  console.log('\n🔧 Useful Commands:')
  console.log('• Test API: curl http://localhost:3001/api/health')
  console.log('• View logs: Open browser console')
  console.log('• Reset config: Delete .env.local and re-run this script')
}

async function main() {
  try {
    const config = await setupEnvironment()
    
    console.log('\n📁 Creating environment file...')
    const envCreated = createEnvFile(config)
    
    if (!envCreated) {
      console.log('❌ Setup failed - could not create environment file')
      process.exit(1)
    }
    
    const apiConnected = await testApiConnection(config.NEXT_PUBLIC_API_URL)
    
    displayNextSteps(apiConnected)
    
  } catch (error) {
    console.error('❌ Setup failed:', error.message)
    process.exit(1)
  } finally {
    rl.close()
  }
}

// Handle script interruption
process.on('SIGINT', () => {
  console.log('\n\n👋 Setup cancelled by user')
  rl.close()
  process.exit(0)
})

main() 